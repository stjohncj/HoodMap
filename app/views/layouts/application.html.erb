<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Hood Map" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">

    <%# FontAwesome icons %>
    <script src="https://use.fontawesome.com/releases/v6.2.0/js/all.js"></script>
    
    <%# Includes all stylesheet files in app/assets/stylesheets %>
    <%= stylesheet_link_tag :app, "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    <%# <%=
      javascript_include_tag "https://maps.googleapis.com/maps/api/js?key=#{ENV['GOOGLE_MAPS_API_KEY']}&callback=initMap"
    %>
    <script>
  (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
    key: "<%= ENV['GOOGLE_MAPS_API_KEY'] %>",
    v: "weekly",
    // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
    // Add other bootstrap parameters as needed, using camel case.
  });
</script>
    <%= javascript_include_tag "application", "data-turbo-track": "reload", type: "module" %>
  </head>

  <body>
    <%= yield %>
    
    <!-- MHD Committee Footer -->
    <footer class="site-footer">
      <div class="container">
        <%= render 'shared/members' %>
      </div>
    </footer>
    
    <!-- Global Image Viewer Modal -->
    <div id="imageViewerModal" class="image-viewer-modal" onclick="closeImageViewer()">
      <div class="image-viewer-controls">
        <button class="image-viewer-zoom" onclick="event.stopPropagation(); zoomImage('out')" title="Zoom Out">âˆ’</button>
        <button class="image-viewer-zoom" onclick="event.stopPropagation(); zoomImage('in')" title="Zoom In">+</button>
        <span class="image-viewer-close" onclick="event.stopPropagation(); closeImageViewer()" title="Close">&times;</span>
      </div>
      <div class="image-viewer-content" onclick="event.stopPropagation()">
        <img id="imageViewerImage" class="image-viewer-image" alt="">
        <div id="imageViewerCaption" class="image-viewer-caption"></div>
      </div>
    </div>
    
    <style>
      /* Site footer styling */
      .site-footer {
        background: #f9fafb;
        margin-top: 1rem;
        padding: 2rem 0;
        position: relative;
      }
      
      .site-footer::before {
        content: '';
        position: absolute;
        top: 0;
        left: 10%;
        right: 10%;
        border-top: 2px solid var(--site-primary-a);
      }
      
      @media (max-width: 768px) {
        .site-footer::before {
          left: 5%;
          right: 5%;
        }
      }
      
      .site-footer .board-members {
        max-width: 1200px;
        margin: 0 auto;
      }
      
      /* Image viewer modal */
      .image-viewer-modal {
        display: none;
        position: fixed;
        z-index: 9999;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.9);
        cursor: zoom-out;
      }
      
      .image-viewer-content {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        max-width: 95%;
        max-height: 85vh;
        overflow: visible;
        transition: width 0.3s ease, height 0.3s ease;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
      }
      
      .image-viewer-image {
        width: auto;
        height: auto;
        max-width: 100%;
        max-height: 60vh;
        object-fit: contain;
        display: block;
        transition: transform 0.3s ease;
        cursor: zoom-in;
        transform-origin: center center;
      }
      
      
      .image-viewer-controls {
        position: fixed;
        top: 15px;
        right: 35px;
        display: flex;
        align-items: center;
        gap: 10px;
        z-index: 10001;
      }
      
      .image-viewer-zoom {
        background: rgba(0, 0, 0, 0.7);
        border: 2px solid white;
        color: white;
        font-size: 24px;
        font-weight: bold;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
      }
      
      .image-viewer-zoom:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: scale(1.1);
      }
      
      .image-viewer-close {
        color: white;
        font-size: 40px;
        font-weight: bold;
        cursor: pointer;
        background: none;
        border: none;
      }
      
      .image-viewer-close:hover {
        opacity: 0.7;
      }
      
      .image-viewer-caption {
        position: absolute;
        top: calc(100% + 20px);
        left: 50%;
        transform: translateX(-50%);
        color: var(--site-primary-a-light);
        font-family: 'Controwell Script', cursive;
        font-size: 1.6rem;
        text-align: center;
        white-space: normal;
        padding: 15px;
        background: transparent;
        border-radius: 8px;
        width: calc(100% - 30px); /* Match image width minus padding (15px * 2) */
        max-width: none; /* Remove max-width constraint */
        box-sizing: border-box; /* Include padding in width calculation */
        line-height: 1.1;
      }
      
      .caption-first-line {
        font-size: 1.8rem;
        background: transparent !important;
      }
    </style>
    
    <script>
      let currentZoom = 1;
      const minZoom = 0.5;
      const maxZoom = 3;
      const zoomStep = 0.25;

      function openImageViewer(imageSrc, imageAlt) {
        const modal = document.getElementById('imageViewerModal');
        const modalImg = document.getElementById('imageViewerImage');
        const caption = document.getElementById('imageViewerCaption');
        const contentContainer = document.querySelector('.image-viewer-content');

        modal.style.display = 'block';
        modalImg.src = imageSrc;
        modalImg.alt = imageAlt;
        
        // Reset zoom and container
        currentZoom = 1;
        modalImg.style.transform = 'scale(1)';
        modalImg.style.cursor = 'zoom-in';
        contentContainer.style.width = '';
        contentContainer.style.height = '';
        contentContainer.style.overflow = 'visible';
        
        // Split text into lines and make first line larger
        const lines = imageAlt.split('\n');
        if (lines.length > 1) {
          const firstLine = `<span class="caption-first-line">${lines[0]}</span>`;
          const remainingLines = lines.slice(1).join('<br>');
          caption.innerHTML = firstLine + '<br>' + remainingLines;
        } else {
          caption.innerHTML = `<span class="caption-first-line">${imageAlt}</span>`;
        }

        // Prevent body scroll when modal is open
        document.body.style.overflow = 'hidden';
      }

      function zoomImage(direction) {
        const modalImg = document.getElementById('imageViewerImage');
        const contentContainer = document.querySelector('.image-viewer-content');
        
        if (direction === 'in' && currentZoom < maxZoom) {
          currentZoom += zoomStep;
        } else if (direction === 'out' && currentZoom > minZoom) {
          currentZoom -= zoomStep;
        }
        
        modalImg.style.transform = `scale(${currentZoom})`;
        modalImg.style.cursor = currentZoom > 1 ? 'zoom-out' : 'zoom-in';
        
        // Adjust container size based on zoom level
        const baseWidth = modalImg.naturalWidth || modalImg.offsetWidth;
        const baseHeight = modalImg.naturalHeight || modalImg.offsetHeight;
        
        if (currentZoom > 1) {
          // Expand container when zoomed in
          const scaledWidth = Math.min(baseWidth * currentZoom, window.innerWidth * 0.95);
          const scaledHeight = Math.min(baseHeight * currentZoom, window.innerHeight * 0.85);
          
          contentContainer.style.width = `${scaledWidth}px`;
          contentContainer.style.height = `${scaledHeight}px`;
          contentContainer.style.overflow = 'auto';
        } else {
          // Reset container when zoomed out
          contentContainer.style.width = '';
          contentContainer.style.height = '';
          contentContainer.style.overflow = 'visible';
        }
        
        // Prevent event bubbling to avoid closing modal
        event.stopPropagation();
      }

      function closeImageViewer() {
        const modal = document.getElementById('imageViewerModal');
        modal.style.display = 'none';

        // Restore body scroll
        document.body.style.overflow = 'auto';
      }

      // Close modal on Escape key
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && document.getElementById('imageViewerModal').style.display === 'block') {
          closeImageViewer();
        }
      });
    </script>
  </body>
</html>
