<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Hood Map" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">

    <%# FontAwesome icons %>
    <script src="https://use.fontawesome.com/releases/v6.2.0/js/all.js"></script>
    
    <%# Includes all stylesheet files in app/assets/stylesheets %>
    <%= stylesheet_link_tag :app, "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    <script>
  (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
    key: "<%= ENV['GOOGLE_MAPS_API_KEY'] %>",
    v: "weekly",
    // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
    // Add other bootstrap parameters as needed, using camel case.
  });
</script>
    <%= javascript_include_tag "application", "data-turbo-track": "reload", type: "module" %>
  </head>

  <body>
    <%= yield %>
    
    <!-- MHD Committee Footer -->
    <footer class="site-footer">
      <div class="container">
        <%= render 'shared/members' %>
      </div>
    </footer>
    
    <!-- Global Image Viewer Modal -->
    <div id="imageViewerModal" class="image-viewer-modal" onclick="window.closeImageViewer()">
      <div class="image-viewer-controls">
        <button class="image-viewer-zoom" onclick="event.stopPropagation(); window.zoomImage('out')" title="Zoom Out">âˆ’</button>
        <button class="image-viewer-zoom" onclick="event.stopPropagation(); window.zoomImage('in')" title="Zoom In">+</button>
        <span class="image-viewer-close" onclick="event.stopPropagation(); window.closeImageViewer()" title="Close">&times;</span>
      </div>
      <button id="galleryNavPrev" class="gallery-nav gallery-nav-prev" onclick="event.stopPropagation(); window.navigateGallery(-1)" title="Previous Image" style="display: none;">
        <i class="fas fa-chevron-left"></i>
      </button>
      <button id="galleryNavNext" class="gallery-nav gallery-nav-next" onclick="event.stopPropagation(); window.navigateGallery(1)" title="Next Image" style="display: none;">
        <i class="fas fa-chevron-right"></i>
      </button>
      <div class="image-viewer-content" onclick="event.stopPropagation()">
        <img id="imageViewerImage" class="image-viewer-image" alt="">
        <div id="imageViewerCaption" class="image-viewer-caption"></div>
      </div>
    </div>
    
    
    <script>
      // Initialize global variables only once
      if (typeof window.imageViewerGlobals === 'undefined') {
        window.imageViewerGlobals = {
          currentZoom: 1,
          minZoom: 0.5,
          maxZoom: 3,
          zoomStep: 0.25,
          galleryImages: [],
          currentImageIndex: 0
        };
      }

      window.openImageViewer = function(imageSrc, imageAlt, isGalleryMode = false) {
        const modal = document.getElementById('imageViewerModal');
        const modalImg = document.getElementById('imageViewerImage');
        const caption = document.getElementById('imageViewerCaption');
        const contentContainer = document.querySelector('.image-viewer-content');

        modal.style.display = 'block';
        modalImg.src = imageSrc;
        modalImg.alt = imageAlt;
        
        // Reset zoom and container
        window.imageViewerGlobals.currentZoom = 1;
        modalImg.style.transform = 'scale(1)';
        modalImg.style.cursor = 'zoom-in';
        contentContainer.style.width = '';
        contentContainer.style.height = '';
        contentContainer.style.overflow = 'visible';
        
        // Split text into lines and make first line larger
        const lines = imageAlt.split('\n');
        if (lines.length > 1) {
          const firstLine = `<span class="caption-first-line">${lines[0]}</span>`;
          const remainingLines = lines.slice(1).join('<br>');
          caption.innerHTML = firstLine + '<br>' + remainingLines;
        } else {
          caption.innerHTML = `<span class="caption-first-line">${imageAlt}</span>`;
        }

        // Only hide gallery navigation and reset state if not in gallery mode
        if (!isGalleryMode) {
          document.getElementById('galleryNavPrev').style.display = 'none';
          document.getElementById('galleryNavNext').style.display = 'none';
          window.imageViewerGlobals.galleryImages = [];
          window.imageViewerGlobals.currentImageIndex = 0;
        }

        // Prevent body scroll when modal is open
        document.body.style.overflow = 'hidden';
      }

      window.openImageGallery = function(galleryData) {
        window.imageViewerGlobals.galleryImages = galleryData.images;
        window.imageViewerGlobals.currentImageIndex = galleryData.currentIndex;
        
        // Open with the selected image (in gallery mode)
        const currentImage = window.imageViewerGlobals.galleryImages[window.imageViewerGlobals.currentImageIndex];
        window.openImageViewer(currentImage.src, currentImage.alt, true);
        
        // Show navigation arrows if there are multiple images
        if (window.imageViewerGlobals.galleryImages.length > 1) {
          window.updateGalleryNavigation();
        }
      }

      window.navigateGallery = function(direction) {
        if (window.imageViewerGlobals.galleryImages.length <= 1) return;
        
        window.imageViewerGlobals.currentImageIndex += direction;
        
        // Wrap around at boundaries
        if (window.imageViewerGlobals.currentImageIndex >= window.imageViewerGlobals.galleryImages.length) {
          window.imageViewerGlobals.currentImageIndex = 0;
        } else if (window.imageViewerGlobals.currentImageIndex < 0) {
          window.imageViewerGlobals.currentImageIndex = window.imageViewerGlobals.galleryImages.length - 1;
        }
        
        // Update the displayed image
        const currentImage = window.imageViewerGlobals.galleryImages[window.imageViewerGlobals.currentImageIndex];
        const modalImg = document.getElementById('imageViewerImage');
        const caption = document.getElementById('imageViewerCaption');
        
        modalImg.src = currentImage.src;
        modalImg.alt = currentImage.alt;
        
        // Reset zoom when navigating
        window.imageViewerGlobals.currentZoom = 1;
        modalImg.style.transform = 'scale(1)';
        modalImg.style.cursor = 'zoom-in';
        
        // Update caption
        const lines = currentImage.alt.split('\n');
        if (lines.length > 1) {
          const firstLine = `<span class="caption-first-line">${lines[0]}</span>`;
          const remainingLines = lines.slice(1).join('<br>');
          caption.innerHTML = firstLine + '<br>' + remainingLines;
        } else {
          caption.innerHTML = `<span class="caption-first-line">${currentImage.alt}</span>`;
        }
        
        window.updateGalleryNavigation();
      }

      window.updateGalleryNavigation = function() {
        const prevBtn = document.getElementById('galleryNavPrev');
        const nextBtn = document.getElementById('galleryNavNext');
        
        if (window.imageViewerGlobals.galleryImages.length > 1) {
          prevBtn.style.display = 'block';
          nextBtn.style.display = 'block';
          
          // Update button states (you could add disabled states if desired)
          prevBtn.style.opacity = window.imageViewerGlobals.currentImageIndex === 0 ? '0.5' : '1';
          nextBtn.style.opacity = window.imageViewerGlobals.currentImageIndex === window.imageViewerGlobals.galleryImages.length - 1 ? '0.5' : '1';
        } else {
          prevBtn.style.display = 'none';
          nextBtn.style.display = 'none';
        }
      }

      window.zoomImage = function(direction) {
        const modalImg = document.getElementById('imageViewerImage');
        const contentContainer = document.querySelector('.image-viewer-content');
        
        if (direction === 'in' && window.imageViewerGlobals.currentZoom < window.imageViewerGlobals.maxZoom) {
          window.imageViewerGlobals.currentZoom += window.imageViewerGlobals.zoomStep;
        } else if (direction === 'out' && window.imageViewerGlobals.currentZoom > window.imageViewerGlobals.minZoom) {
          window.imageViewerGlobals.currentZoom -= window.imageViewerGlobals.zoomStep;
        }
        
        modalImg.style.transform = `scale(${window.imageViewerGlobals.currentZoom})`;
        modalImg.style.cursor = window.imageViewerGlobals.currentZoom > 1 ? 'zoom-out' : 'zoom-in';
        
        // Adjust container size based on zoom level
        const baseWidth = modalImg.naturalWidth || modalImg.offsetWidth;
        const baseHeight = modalImg.naturalHeight || modalImg.offsetHeight;
        
        if (window.imageViewerGlobals.currentZoom > 1) {
          // Expand container when zoomed in
          const scaledWidth = Math.min(baseWidth * window.imageViewerGlobals.currentZoom, window.innerWidth * 0.95);
          const scaledHeight = Math.min(baseHeight * window.imageViewerGlobals.currentZoom, window.innerHeight * 0.85);
          
          contentContainer.style.width = `${scaledWidth}px`;
          contentContainer.style.height = `${scaledHeight}px`;
          contentContainer.style.overflow = 'auto';
        } else {
          // Reset container when zoomed out
          contentContainer.style.width = '';
          contentContainer.style.height = '';
          contentContainer.style.overflow = 'visible';
        }
        
        // Prevent event bubbling to avoid closing modal
        event.stopPropagation();
      }

      window.closeImageViewer = function() {
        const modal = document.getElementById('imageViewerModal');
        modal.style.display = 'none';

        // Restore body scroll
        document.body.style.overflow = 'auto';
      }

      // Keyboard navigation
      document.addEventListener('keydown', function(e) {
        if (document.getElementById('imageViewerModal').style.display === 'block') {
          if (e.key === 'Escape') {
            window.closeImageViewer();
          } else if (e.key === 'ArrowLeft') {
            window.navigateGallery(-1);
          } else if (e.key === 'ArrowRight') {
            window.navigateGallery(1);
          }
        }
      });
    </script>
  </body>
</html>
